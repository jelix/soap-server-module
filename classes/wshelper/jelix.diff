--- unpatched/IPReflectionClass.class.php	2009-07-20 01:29:06.000000000 +0200
+++ IPReflectionClass.class.php	2009-07-20 01:29:06.000000000 +0200
@@ -5,16 +5,18 @@
  * This class extends the reflectionClass class by also parsing the
  * comment for javadoc compatible @tags and by providing help
  * functions to generate a WSDL file. THe class might also
  * be used to generate a phpdoc on the fly
  *
  * @version 0.1
  * @author David Kingma
  * @extends reflectionClass
+ * Modified by sylvain261 in order to add the alsoHerited param to getMethods and getProperties methods
+ * Modified by sylvain261 in order to remove __constuct method in getMethods 
  */
 class IPReflectionClass extends reflectionClass {
 	/** @var string class name */
 	public $classname = null;
 
 	/** @var string */
 	public $fullDescription = "";
 
@@ -51,39 +53,41 @@
 
 	/**
 	 *Levert een array met alle methoden van deze class op
 	 *
 	 * @param boolean If the method should also return protected functions
 	 * @param boolean If the method should also return private functions
 	 * @return IPReflectionMethod[]
 	 */
-	public function getMethods($alsoProtected = true, $alsoPrivate = true){
+	public function getMethods($alsoProtected = true, $alsoPrivate = true, $alsoHerited = false){
 		$ar = parent::getMethods();
 		foreach($ar as $method){
+			if($method->name == '__construct')
+				continue;
 			$m = new IPReflectionMethod($this->classname, $method->name);
-			if((!$m->isPrivate() || $alsoPrivate) && (!$m->isProtected() || $alsoProtected) && ($m->getDeclaringClass()->name == $this->classname))
+			if((!$m->isPrivate() || $alsoPrivate) && (!$m->isProtected() || $alsoProtected) && (($m->getDeclaringClass()->name == $this->classname) || $alsoHerited))
 				$this->methods[$method->name] = $m;
 		}
 		ksort($this->methods);
 		return $this->methods;
 	}
 
 	/**
 	 * Levert een array met variabelen van deze class op
 	 *
 	 * @param boolean If the method should also return protected properties
 	 * @param boolean If the method should also return private properties
 	 * @return IPReflectionProperty[]
 	 */
-	public function getProperties($alsoProtected=true,$alsoPrivate=true) {
+	public function getProperties($alsoProtected=true,$alsoPrivate=true, $alsoHerited = false) {
 		$ar = parent::getProperties();
 		$this->properties = Array();
 		foreach($ar as $property){
-			if((!$property->isPrivate() || $alsoPrivate) && (!$property->isProtected() || $alsoProtected)){
+			if((!$property->isPrivate() || $alsoPrivate) && (!$property->isProtected() || $alsoProtected) && (($property->getDeclaringClass()->name == $this->classname) || $alsoHerited)){
 				try{
 					$p = new IPReflectionProperty($this->classname, $property->getName());
 					$this->properties[$property->name]=$p;
 				}catch(ReflectionException $exception){
 					echo "Fout bij property: ".$property->name."<br>\n";
 				}
 			}
 		}
--- unpatched/IPReflectionCommentParser.class.php	2009-07-20 01:29:06.000000000 +0200
+++ IPReflectionCommentParser.class.php	2009-08-24 22:46:39.000000000 +0200
@@ -47,17 +47,17 @@
 	 * @return void
 	 */
 	function parse() {
 		//reset object
 		$descriptionDone = false;
 		$this->fullDescriptionDone = false;
 
 		//split lines
-		$lines = split("\n", $this->comment);
+		$lines = explode("\n", $this->comment);
 
 		//check lines for description or tags
 		foreach ($lines as $line) {
 			$pos = strpos($line,"* @");
 			if (trim($line) == "/**" || trim($line) == "*/") { //skip the start and end line
 			}elseif (!($pos === false)) { //comment
 				$this->parseTagLine(substr($line,$pos+3));
 				$descriptionDone=true;
@@ -124,18 +124,19 @@
 				break;
 			case 'extends': break;
 			case 'global':
 				$this->obj->globals[] = $tagArr[1];
 				break;
 			case 'param':
 				$o = new stdClass();
 				$o->type = trim($tagArr[1]);
+				$o->name= str_replace('$', '', trim($tagArr[2]));
 				$o->comment = implode(" ",$tagArr);
-				$this->obj->params[] = $o;
+				$this->obj->parameters[$o->name] = $o;
 				break;
 			case 'return':
 				$this->obj->return = trim($tagArr[1]); break;
 			case 'link':break;
 			case 'see':break;
 			case 'since':
 				$this->obj->since = trim($tagArr[1]); break;
 			case 'static':
--- unpatched/IPReflectionMethod.class.php	2009-07-20 01:29:06.000000000 +0200
+++ IPReflectionMethod.class.php	2009-07-20 01:29:06.000000000 +0200
@@ -60,25 +60,16 @@
 	}
 	
 	/**
 	 * Returns an array with parameter objects, containing type info etc.
 	 *
 	 * @return ReflectionParameter[] Associative array with parameter objects
 	 */
 	public function getParameters(){
-		$this->parameters = Array();
-		$ar = parent::getParameters();
-		$i = 0;
-
-		foreach((array)$ar as $parameter){
-			$parameter->type = $this->params[$i++]->type;
-			$this->parameters[$parameter->name] = $parameter;
-		}
-		
 		return $this->parameters;
 	}
 
 	/**
 	 * 	
 	 * @param $annotationName String the annotation name
 	 * @param $annotationClass String the annotation class
 	 * @return void
--- unpatched/IPXMLSchema.class.php	2009-07-20 01:29:06.000000000 +0200
+++ IPXMLSchema.class.php	2009-07-20 01:29:06.000000000 +0200
@@ -1,12 +1,13 @@
 <?php
 
 /**
  * This class helps you creating a valid XMLSchema file
+ * Sylvain261 : Ajout du paramètre false à class_exists pour empécher l'autoload
  */
 class IPXMLSchema {
 	/** @var domelement reference to the parent domelement */
 	private $parentElement;
 	
 	/** @var domelement[] Array with references to all known types in this schema */
 	private $types = Array();
 	
@@ -22,16 +23,21 @@
 	 * @param string The variable type (Array or class name)
 	 * @param string The variable name
 	 * @param domNode Used when adding an inline complexType
 	 * @return domNode The complexType node
 	 */
 	
 	public function addComplexType($type, $name = false, $parent = false) {
 		if(!$parent){//outline element
+
+			if(substr($name,-4) == '[=>]'){
+				$name = substr($name, 0,strlen($name) -4);
+			}
+			
 			//check if the complexType doesn't already exists
 			if(isset($this->types[$name])) return $this->types[$name];
 
 			//create the complexType tag beneath the xsd:schema tag
 			$complexTypeTag=$this->addElement("xsd:complexType", $this->parentElement);
 			if($name){//might be an anonymous element
 				$complexTypeTag->setAttribute("name",$name);
 				$this->types[$name]=$complexTypeTag;
@@ -39,36 +45,27 @@
 		}else{//inline element
 			$complexTypeTag = $this->addElement("xsd:complexType", $parent);
 		}
 
 		//check if its an array
 		if(strtolower(substr($type,0,6)) == 'array(' || substr($type,-2) == '[]'){
 			$this->addArray($type,$complexTypeTag);
 		}else{//it should be an object
-			$tag=$this->addElement("xsd:all", $complexTypeTag);
-			//check if it has the name 'object()' (kind of a stdClass)
-			if(strtolower(substr($type,0,6)) == 'object'){//stdClass
-				$content = substr($type, 7, (strlen($type)-1));
-				$properties = split(",", $content);//split the content into properties
-				foreach((array)$properties as $property){
-					if($pos = strpos($property, "=>")){//array with keys (order is important, so use 'sequence' tag)
-						$keyType = substr($property,6,($pos-6));
-						$valueType = substr($property,($pos+2), (strlen($property)-7));
-						$el->$this->addTypeElement($valueType, $keyType, $tag);
-					}else{
-						throw new WSDLException("Error creating WSDL: expected \"=>\". When using the object() as type, use it as object(paramname=>paramtype,paramname2=>paramtype2)");
-					}
-				}
+			if(substr($type,-4) == '[=>]'){
+				$type = substr($type, 0,strlen($type) -4);
+				echo("\nAdd type element :$type \n");
+				$this->addTypeElement($type, $name, $complexTypeTag);
 			}else{ //should be a known class
 
-				if(!class_exists($name)) throw new WSDLException("Error creating WSDL: no class found with the name '$name' / $type : $parent, so how should we know the structure for this datatype?");
+				$tag=$this->addElement("xsd:all", $complexTypeTag);
+				if(!class_exists($name, FALSE)) throw new WSDLException("Error creating WSDL: no class found with the name '$name' / $type : $parent, so how should we know the structure for this datatype?");
 				$v = new IPReflectionClass($name);
 				//TODO: check if the class extends another class?
-				$properties = $v->getProperties(false, false);//not protected and private properties
+				$properties = $v->getProperties(false, false, false);//not protected and private properties
 
 				foreach((array) $properties as $property){
 					if(!$property->isPrivate){
 						$el = $this->addTypeElement($property->type, $property->name, $tag, $property->optional);
 					}
 				}
 			}
 		}
@@ -101,19 +98,28 @@
 			if(substr($type,-2) == '[]'){
 				if($this->array_inline){
 					$this->addComplexType($type, false, $el);
 				}else{
 					$name = substr($type, 0, -2)."Array";
 					$el->setAttribute("type", "tns:".$name);
 					$this->addComplexType($type, $name, false);
 				}
-			}else{//else, new complextype, outline (element with 'ref' attrib)
-				$el->setAttribute("type", "tns:".$type);
-				$this->addComplexType($type, $type);
+			}else{
+				if(substr($type,-4) == '[=>]'){
+					$name = substr($type, 0, -4);
+					$el->setAttribute("type", "apache:Map");
+					if(!$this->checkSchemaType(strtolower($name))){
+						$this->addComplexType($name, $name, false);
+					}
+				}else{
+					//else, new complextype, outline (element with 'ref' attrib)
+					$el->setAttribute("type", "tns:".$type);
+					$this->addComplexType($type, $type);
+				}
 			}
 		}
 		return $el;
 	}
 
 	/**
 	 * Creates an xmlSchema element for the given array
 	 */
--- unpatched/WSDLStruct.class.php	2009-07-20 01:29:06.000000000 +0200
+++ WSDLStruct.class.php	2009-07-20 01:29:06.000000000 +0200
@@ -62,17 +62,18 @@
 	/** @var IPXMLSchema */
 	private $xmlSchema;
 	
 	//namespaces used
 	const NS_WSDL = "http://schemas.xmlsoap.org/wsdl/";
 	const NS_SOAP = "http://schemas.xmlsoap.org/wsdl/soap/";
 	const NS_ENC  = "http://schemas.xmlsoap.org/soap/encoding/"; 
 	const NS_XSD  = "http://www.w3.org/2001/XMLSchema";
-	
+	const NS_APACHE  = "http://xml.apache.org/xml-soap";
+
 	const CREATE_EMPTY_INPUTS = true;
 	
 	/*
 	 * @param string Target namespace
 	 * @param string URL for the webservice
 	 * @return void
 	 */
 	public function __construct($tns, $url, $type = SOAP_RPC, $use = SOAP_ENCODED){
@@ -111,16 +112,17 @@
 		
 		//add all definitions
 		$definitions=$this->definitions;
 		$definitions->setAttribute("xmlns", 			self::NS_WSDL);
 		$definitions->setAttribute("xmlns:soap", 		self::NS_SOAP);
 		$definitions->setAttribute("xmlns:SOAP-ENC", 	self::NS_ENC);
 		$definitions->setAttribute("xmlns:wsdl", 		self::NS_WSDL);
 		$definitions->setAttribute("xmlns:xsd", 		self::NS_XSD);
+		$definitions->setAttribute("xmlns:apache", 		self::NS_APACHE);
 		$definitions->setAttribute("xmlns:tns", 		$this->tns);
 		$definitions->setAttribute("targetNamespace", 	$this->tns);
 
 		//add all the services
 		foreach((array)$this->services as $serviceName => $service){
 			//add the portType
 			$portType = $this->addPortType($serviceName);
 
@@ -279,21 +281,29 @@
 			$this->addToDebug("Adding Message part: '$partName => $partType'");
 			$part=$this->addElement("part", $msg);
 			$part->setAttribute("name", $partName);
 
 			//check if it is a valid XML Schema datatype
 			if($t = IPXMLSchema::checkSchemaType(strtolower($partType)))
 				$part->setAttribute("type", "xsd:".$t);
 			else{
-				//If it is an array, change the type name
-				$partName = (substr($partType,-2) == "[]")?substr($partType,0,strpos($partType,"["))."Array":$partType;
-
-				$part->setAttribute("type", "tns:".$partName);
-				$this->xmlSchema->addComplexType($partType, $partName);
+				//If it is an associative array, change the type name
+				if(substr($partType,-4) == "[=>]"){
+					$partType = substr($partType,0, strlen($partType)-4);
+					if(!IPXMLSchema::checkSchemaType(strtolower($partType))){
+						$partName = $partType;
+						$this->xmlSchema->addComplexType($partType, $partName);
+					}
+					$part->setAttribute("type", "apache:Map");
+				}else{
+					$partName = (substr($partType,-2) == "[]")?substr($partType,0,strpos($partType,"["))."Array":$partType;
+					$part->setAttribute("type", "tns:".$partName);
+					$this->xmlSchema->addComplexType($partType, $partName);
+				}
 			}
 		}
 	}
 
 	/**
 	 * Adds an input element to the given parent (an operation tag)
 	 * @param domNode The Parent domNode
 	 * @param boolean Kind of tag. true=input tag, false=output tag
